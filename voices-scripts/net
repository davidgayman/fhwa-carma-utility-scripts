#!/bin/bash
source ${CARMA_SCRIPT_ROOT}/scripts-base/carma-bashbase

# ------------------------------------------------------------------------------
# Description
# ------------------------------------------------------------------------------

# Provide user-friendly VOICES network management tool to connect a node to the VOICES network.

# ------------------------------------------------------------------------------
# Constants
# ------------------------------------------------------------------------------

VPN_REGISTRATION_NODE="TENA EM Pilot 1"

COMMAND_LIST["get-ip"]="Get the current IP address."
COMMAND_LIST["connect"]="Connect to the VOICES network."
COMMAND_LIST["status"]="Check the VOICES network connection status."

COMMAND_LIST["show-network"]="List the VOICES network nodes."
COMMAND_LIST["network-test"]="Verify connectivity to the IP address of a VOICES network node."

COMMAND_LIST["install-service"]="Install the VOICES network client onto the system as a service which will start automatically."
COMMAND_LIST["delete-service"]="Uninstall the VOICES network service."

COMMAND_LIST["icmp-ping-test"]="Perform a pre-configured network test using ICMP ping to verify connectivity."
COMMAND_LIST["monitor"]="Perform a pre-configured network test using ICMP ping to verify connectivity."

# ------------------------------------------------------------------------------
# Functions
# ------------------------------------------------------------------------------

get-ip() {
  # https://stackoverflow.com/a/49552792
  sudo ip -o route get to 8.8.8.8 | sed -n 's/.*src \([0-9.]\+\).*/\1/p'
}

# Single entrypoint to registering this node to the VOICES network.
# Should recognize and handle each of the following cases:
# 1. Totally unconfigured system.
# 2. Configuration is partially complete.
#   - Has Twingate vpn-connector but not vpn-client
#   - Has Twingate vpn-client but not vpn-connector
# 3. Configured system that is offline due to:
#   - Reboot failed to start Twingate
#   - Reboot failed to connect Twingate
#   - Migrated network changed local IP
# 4. Configured system that is online (do nothing).
connect() {

  twingate auth $VPN_REGISTRATION_NODE

#  # Determine configuration status
#  # TODO
#  #IS_TWINGATE_CONNECTOR_INSTALLED=...
#  #IS_TWINGATE_CLIENT_INSTALLED=$(which twingate | ...)
#  IS_TWINGATE_CONNECTOR_INSTALLED=true
#  IS_TWINGATE_CLIENT_INSTALLED=true
#
#  # Configure vpn-connector
#  if [[ $IS_TWINGATE_CONNECTOR_INSTALLED == "false" ]]; then
#    echo "Installing VPN Connector..."
#    echo "Your IP address is: $(get-ip)"
#    echo "Provide this to your VOICES network administrator."
#    echo "Paste the command given by your VOICES network administrator here and press enter:"
#    read COMMAND
#    $COMMAND
#  fi
#
#  # Configure vpn-client
#  if [[ $IS_TWINGATE_CLIENT_INSTALLED == "false" ]]; then
#    echo "Installing VPN Client..."
#    curl -S 'https://binaries.twingate.com/client/linux/install.sh' | sudo bash
#    echo "Follow instructions to configure the VPN Client."
#    echo "  Network Name: voices"
#    echo "  Select yes to Twingate starting on boot, and yes to caching credentials."
#    sudo twingate setup
#  fi
#
#  # Ensure Twingate is started
##  if [[]]; then
##    twingate start
##  fi
#
#  # Authenticate to the network
##  if [[ ]]; then
##    echo "Authenticating to the VOICES network..."
##    twingate auth $VPN_REGISTRATION_NODE
##  fi
#
#  # Verify connection
##  check-status
}

status() {
  echo "VOICES Network Status: $(twingate status)"
}

show-network() {
  echo "VOICES Network"
  echo ""
  twingate resources
}

network-test() {
  # TODO
  REMOTE_IP=$1
  echo "Testing connection to $REMOTE_IP"
#  ssh user@dst 'iperf -s'
#  ssh user@src 'iperf -c dst'
}

install-service() {
  # TODO
  echo "Installing VPN service..."
}

delete-service() {
  # TODO
    echo "Deleting VPN service..."
}

icmp-ping-test() {
  PYTHON_SCRIPT_CACHE=/tmp/.python_script_cache_file
#
#  PYTHON_SCRIPT=$(cat << '_PYTHON_SCRIPT' >$PYTHON_SCRIPT_CACHE
#
#  def print_pairing_commands(src, dst):
#    print(f"ssh carma@{dst} 'iperf -s'")
#    print(f"ssh carma@{src} 'iperf -c {dst}'")
#
#  system1="192.168.x.y"
#  system2="192.168.x.y"
#  system3="192.168.x.y"
#
#  system4="192.168.x.y"
#  system4_ghost="192.168.x.y"
#
#  print_pairing_commands(system1, system2)
#  print_pairing_commands(system1, system3)
#  print_pairing_commands(system2, system3)
#
#  print_pairing_commands(system4, system3)
#  print_pairing_commands(system4, system2)
#  print_pairing_commands(system4, system4_ghost)
#
#  _PYTHON_SCRIPT
#  )
#
#  python3 $PYTHON_SCRIPT_CACHE $@
}

monitor() {
  # Start up a set of monitoring tools in different windows or tabs, perhaps using a paneling solution.
  echo
}

# ------------------------------------------------------------------------------
# Run
# ------------------------------------------------------------------------------

# Execute the script with forward-declared functions
main $@
