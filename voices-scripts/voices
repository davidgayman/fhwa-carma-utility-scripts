#!/bin/bash

# ------------------------------------------------------------------------------
# Description
# ------------------------------------------------------------------------------

# Commands to configure and interact with the VOICES network.

# ------------------------------------------------------------------------------
# Parameters
# ------------------------------------------------------------------------------

# Description
DESCRIPTION="Control script for this project."

# Define a set of commands
declare -A COMMAND_LIST
COMMAND_LIST["help"]="Print this help information."
COMMAND_LIST["build"]="Build the docker image."
COMMAND_LIST["run"]="Run the container."

# Locate this base script
THIS_COMMAND=$(basename $BASH_SOURCE)
CARMA_UTILITIES_ROOT=$( cd -- "$( dirname -- "${BASH_SOURCE[0]}" )" &> /dev/null && pwd )/..

# Global environment variables
CARMA_SCRIPT_ROOT=$CARMA_UTILITIES_ROOT/scripts
CARMA_DOCKER_ROOT=$CARMA_UTILITIES_ROOT/docker

# Docker parameters
DOCKER_IMAGE_NAME=voices
DOCKER_CONTAINER_NAME=voices
DOCKER_DOCKERFILE_FULL_PATH=$CARMA_DOCKER_ROOT/$DOCKER_IMAGE_NAME/Dockerfile
DOCKER_CONTAINER_RUN_OPTIONS="--entrypoint /bin/bash --rm"

# Paths
HOST_SRC_ROOT=$HOME/code/stol
HOST_BINARIES_PATH=$HOME/carma/binaries
HOST_INSTALLATION_PACKAGE_PATH=$HOME/carma/installation-packages
DOCKER_BUILD_SPACE=$CARMA_UTILITIES_ROOT

# Binary repository management
BIN_REPOSITORY_INSTALLATION_PACKAGES_RELATIVE_PATH=installation-packages
BIN_REPOSITORY_BINARIES_RELATIVE_PATH=binaries

# ------------------------------------------------------------------------------
# Main Loop
# ------------------------------------------------------------------------------

main() {

  # Call the relevant operation (1:1 mapping of command:function)
  COMMAND=$1
  shift
  $COMMAND $@

  exit 0
}

# ------------------------------------------------------------------------------
# Command Functions
# ------------------------------------------------------------------------------

help() {
  printf "%s\n" "$0 <command> <args>"
  printf "\n"
  printf "%s\n" "$DESCRIPTION"
  printf "\n"
  printf "Commands:\n"
  for COM in ${!COMMAND_LIST[@]}; do
    printf "\t%s\t\t\t%s\n" "$COM" "${COMMAND_LIST[$COM]}"
  done
  printf "\n"
}

push-binaries() {
  find $HOST_BINARIES_PATH -type f | while read FILEPATH; do
    tx push $FILEPATH $BIN_REPOSITORY_BINARIES_RELATIVE_PATH
  done
}

pull-binaries() {
  tx pull $BIN_REPOSITORY_ROOT/$BIN_REPOSITORY_BINARIES_RELATIVE_PATH $HOST_BINARIES_PATH
}

clone() {
  REPOSITORY_SET=$1
  if [[ $REPOSITORY_SET == "all" || $REPOSITORY_SET == "sim" ]]; then
    mkdir -p $HOST_SRC_ROOT/sim
    git clone  https://github.com/usdot-fhwa-stol/carma-simulation.git  $HOST_SRC_ROOT/sim/carma-simulation
    git clone  git@github.com:carla-simulator/carla.git  $HOST_SRC_ROOT/sim/carla
    git clone  https://github.com/usdot-fhwa-stol/carma-carla-integration.git  $HOST_SRC_ROOT/sim/carma-carla-integration
  fi
  if [[ $REPOSITORY_SET == "all" || $REPOSITORY_SET == "vehicle" ]]; then
    mkdir -p $HOST_SRC_ROOT/vehicle
    git clone  https://github.com/usdot-fhwa-stol/carma-platform.git  $HOST_SRC_ROOT/vehicle/carma-platform
  fi
  if [[ $REPOSITORY_SET == "all" || $REPOSITORY_SET == "roadside" ]]; then
    mkdir -p $HOST_SRC_ROOT/roadside
    git clone  git@github.com:usdot-fhwa-OPS/V2X-Hub.git  $HOST_SRC_ROOT/roadside/V2X-Hub
    git clone  git@github.com:usdot-fhwa-stol/carma-streets.git  $HOST_SRC_ROOT/roadside/carma-streets
  fi
  if [[ $REPOSITORY_SET == "all" || $REPOSITORY_SET == "lib" ]]; then
    mkdir -p $HOST_SRC_ROOT/lib
    git clone  git@github.com:usdot-fhwa-stol/carma-time-lib.git  $HOST_SRC_ROOT/lib/carma-time-lib
    git clone  git@github.com:usdot-fhwa-stol/snmp-client.git  $HOST_SRC_ROOT/lib/snmp-client
  fi
  if [[ $REPOSITORY_SET == "all" || $REPOSITORY_SET == "voices" ]]; then
    mkdir -p $HOME/tenadev
    git clone  git@github.com:usdot-fhwa-stol/voices-poc.git  $HOME/tenadev/voices-poc
    git clone  https://www.trmc.osd.mil/bitbucket/scm/vug/tena-cmake-package.git  $HOME/tenadev/tena-cmake-package
    git clone  https://www.trmc.osd.mil/bitbucket/scm/vug/v2xhub-tena-spat-plugin.git  $HOME/tenadev/v2xhub-tena-spat-plugin
    git clone  https://www.trmc.osd.mil/bitbucket/scm/vug/vug-threads.git  $HOME/tenadev/vug-threads
    git clone  https://www.trmc.osd.mil/bitbucket/scm/vug/tena-entity-generator.git  $HOME/tenadev/tena-entity-generator
    git clone  https://www.trmc.osd.mil/bitbucket/scm/vug/TA-Radar-RCC_GENOS-Video-StreamDescriptor-Subscriber-v7.2.7.git  $HOME/tenadev/TA-Radar-RCC_GENOS-Video-StreamDescriptor-Subscriber-v7.2.7
    git clone  https://www.trmc.osd.mil/bitbucket/scm/vug/carla-tena-adapter.git  $HOME/tenadev/carla-tena-adapter
    git clone  https://www.trmc.osd.mil/bitbucket/scm/vug/scenario-publisher.git  $HOME/tenadev/scenario-publisher
    git clone  https://www.trmc.osd.mil/bitbucket/scm/vug/carma-platform-tena-adapter.git  $HOME/tenadev/carma-platform-tena-adapter
    git clone  https://www.trmc.osd.mil/bitbucket/scm/vug/pcapJ2735Decoder.git  $HOME/tenadev/pcapJ2735Decoder
    git clone  https://www.trmc.osd.mil/bitbucket/scm/vug/v2xhub-tena-mobility-plugin.git  $HOME/tenadev/v2xhub-tena-mobility-plugin
    git clone  https://www.trmc.osd.mil/bitbucket/scm/vug/v2xhub-tena-bsm-plugin.git  $HOME/tenadev/v2xhub-tena-bsm-plugin
    git clone  https://www.trmc.osd.mil/bitbucket/scm/vug/carla-scenario-adapter.git  $HOME/tenadev/carla-scenario-adapter
    git clone  https://www.trmc.osd.mil/bitbucket/scm/vug/vug-udp-protocolio.git  $HOME/tenadev/vug-udp-protocolio
    git clone  https://www.trmc.osd.mil/bitbucket/scm/vug/spat-adapter.git  $HOME/tenadev/spat-adapter
    git clone  https://www.trmc.osd.mil/bitbucket/scm/vug/carma-platoon-test-publisher.git  $HOME/tenadev/carma-platoon-test-publisher
    git clone  git@github.com:usdot-fhwa-stol/tena-j2735-message-adapter.git  $HOME/tenadev/tena-j2735-message-adapter
    git clone  https://www.trmc.osd.mil/bitbucket/scm/vug/vug-logging.git  $HOME/tenadev/vug-logging
    git clone  https://www.trmc.osd.mil/bitbucket/scm/vug/carla-traffic-light-adapter.git  $HOME/tenadev/carla-traffic-light-adapter
    git clone  https://www.trmc.osd.mil/bitbucket/scm/vug/v2xhub-tena-traffic-control-plugin.git  $HOME/tenadev/v2xhub-tena-traffic-control-plugin
    git clone  git@github.com:usdot-fhwa-stol/tena-traffic-light-entity-generator.git  $HOME/tenadev/tena-traffic-light-entity-generator
    git clone  https://www.trmc.osd.mil/bitbucket/scm/vug/VUG-Signals-TrafficLight-Publisher-v7.2.7.git  $HOME/tenadev/VUG-Signals-TrafficLight-Publisher-v7.2.7
    git clone  https://www.trmc.osd.mil/bitbucket/scm/vug/TenaBsmPlugin.git  $HOME/tenadev/TenaBsmPlugin
  fi
}

build() {
  set -x
  sudo docker build -t $DOCKER_IMAGE_NAME:latest $DOCKER_BUILD_VOLUME_MAPPING -f $DOCKER_DOCKERFILE_FULL_PATH $DOCKER_BUILD_SPACE
}

run() {
  sudo docker run $DOCKER_CONTAINER_RUN_OPTIONS --name $DOCKER_CONTAINER_NAME:latest $DOCKER_IMAGE_NAME:latest
  docker exec -it $DOCKER_CONTAINER_NAME:latest /bin/bash
}

# ------------------------------------------------------------------------------
# Execute the script
# ------------------------------------------------------------------------------

main $@
