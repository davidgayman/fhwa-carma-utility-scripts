#!/bin/bash
source ${CARMA_SCRIPT_ROOT}/scripts-base/carma-bashbase

# ------------------------------------------------------------------------------
# Constants
# ------------------------------------------------------------------------------

# Paths
HOST_INSTALLATION_PACKAGE_PATH=$HOME/carma/installation-packages
DOCKER_BUILD_SPACE=$CARMA_UTILITIES_ROOT

# Container arguments
DOCKER_VOLUME_MAPPING="-v ${HOST_INSTALLATION_PACKAGE_PATH}:${HOST_INSTALLATION_PACKAGE_PATH}"
#DOCKER_CONTAINER_ENV="--env CARMA_SCRIPT_ROOT=$CARMA_SCRIPT_ROOT"
#DOCKER_BUILD_ENV="--build-arg CARMA_SCRIPT_ROOT=$CARMA_SCRIPT_ROOT"

# ------------------------------------------------------------------------------
# Parameters
# ------------------------------------------------------------------------------

# Define the following in subscripts:
DOCKER_CONTAINER_NAME=
declare -a DOCKER_IMAGE_NAME_APPEND_LIST
DOCKER_CONTAINER_RUN_OPTIONS=

# ------------------------------------------------------------------------------
# Commands
# ------------------------------------------------------------------------------

COMMAND_LIST["build"]="Build the image."
#COMMAND_LIST["push"]="Push the image to the global repository."
COMMAND_LIST["sh"]="Start the container and shell into it interactively."
COMMAND_LIST["devsh"]="Start the container, shell into it, and launch an IDE."

#COMMAND_LIST["pull"]="Pull a pre-built image."
COMMAND_LIST["install"]="Install as a persistent service on this, or a remote, system."
COMMAND_LIST["run"]="Run the service."
#COMMAND_LIST["sh"]="Shell into a running container to access sub-commands to manage the system."
#COMMAND_LIST["stop"]="Stop the service."

build() {
#  DOCKER_CONTAINER_NAME=
#  declare -A DOCKER_IMAGE_NAME_APPEND_LIST
#  DOCKER_CONTAINER_RUN_OPTIONS=

  for DOCKER_IMAGE_APPEND_NAME in "${DOCKER_IMAGE_NAME_APPEND_LIST[@]}"
  do

    DOCKER_IMAGE_NAME=$DOCKER_CONTAINER_NAME-$DOCKER_IMAGE_APPEND_NAME
    DOCKER_DOCKERFILE_FULL_PATH=$CARMA_DOCKER_ROOT/$DOCKER_CONTAINER_NAME/Dockerfile-$DOCKER_IMAGE_APPEND_NAME

    printf "\n\n--------------------------------------------------------------------------------\n"
    printf "Building container: $DOCKER_CONTAINER_NAME | Component image: $DOCKER_IMAGE_NAME"
    printf "\n--------------------------------------------------------------------------------\n\n"

    sudo docker build -t $DOCKER_IMAGE_NAME:latest -f $DOCKER_DOCKERFILE_FULL_PATH $DOCKER_BUILD_SPACE

  done


#  docker build $DOCKERFILE_FULL_PATH $DOCKER_IMAGE_NAME

#  ENV HOST_HOST_INSTALLATION_PACKAGE_PATH=$HOME/voices-large-files
#  ENV HOST_INSTALLATION_PACKAGE_PATH=$HOME/voices-large-files
#  sudo docker run --rm -v HOST_HOST_INSTALLATION_PACKAGE_PATH:HOST_INSTALLATION_PACKAGE_PATH -v /Users/$INSTALL_TENA_USERNAME/$INSTALL_TENA_DIR:/home tena:v2xhub /home/Downloads/TENA-MiddlewareSDK-v6.0.8.B@Product@u2004-gcc9-64-va0b09d44.bin -i /home --auto
#
#  docker build ${DOCKER_VOLUME_MAPPING} --force-rm --rm -f ./Dockerfile -t tena:carla .
}

#push() {
#  docker push
#}

sh() {
  echo "container-management sh"
  run
#  docker exec ${DOCKER_VOLUME_MAPPING} -it $CONTAINER_NAME clion
}

devsh() {
  echo "container-management devsh"
  run
#  docker exec ${DOCKER_VOLUME_MAPPING} -it $CONTAINER_NAME clion
}

#pull() {
#  docker pull
#}
#
install() {
  # TODO Provide options to enable installation to a remote machine, or this one.
  # TODO Reference this info for proper configuration as a systemd service: https://blog.marcnuri.com/docker-container-as-linux-system-service
  ssh $TARGET sudo docker run -d $CONTAINER_RUN_OPTIONS $DOCKER_VOLUME_MAPPING --name $CONTAINER_NAME $IMAGE_NAME
}
#
run() {
  echo "container-management run"
  sudo docker run $DOCKER_CONTAINER_RUN_OPTIONS $DOCKER_VOLUME_MAPPING --name $DOCKER_CONTAINER_NAME $DOCKER_IMAGE_NAME
#  docker run ${DOCKER_VOLUME_MAPPING} $IMAGE_NAME as $CONTAINER_NAME $CONTAINER_RUN_OPTIONS
}
#
#sh() {
#  docker exec ${DOCKER_VOLUME_MAPPING} -it $CONTAINER_NAME /bin/bash
#}
#
#stop() {
#  docker stop ${DOCKER_VOLUME_MAPPING} $CONTAINER_NAME
#}
