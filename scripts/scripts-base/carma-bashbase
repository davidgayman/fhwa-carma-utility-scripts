#!/bin/bash

# ------------------------------------------------------------------------------
# Description
# ------------------------------------------------------------------------------

# Usage:
# 1. Inherit this script: `source /opt/carma-bashbase`
# 2. Define the following items:
#     DESCRIPTION: Script description.
#     COMMAND_LIST: Command names and help description.
#     SUBCOMMAND_LIST: Sub-command names and help description.
#     All specialized environment variables needed by a particular superclass.
# . Implement functions with matching the command names.
# . Call main at the end of your script: `main $@`

# ------------------------------------------------------------------------------
# Constants
# ------------------------------------------------------------------------------

# Locate this base script
THIS_COMMAND=$(basename $BASH_SOURCE)

# ------------------------------------------------------------------------------
# Parameters
# ------------------------------------------------------------------------------

# Define a set of commands
declare -A COMMAND_LIST
COMMAND_LIST["help"]="Print this help information."

# Define a set of sub-commands
declare -A SUBCOMMAND_LIST
SUBCOMMAND_LIST["all"]="Run the command on all subcommands."

# ------------------------------------------------------------------------------
# Process Arguments
# ------------------------------------------------------------------------------

main() {

  COMMAND=$1
  verify_implementation

  # If a subcommand is requested, prepend the name of the calling script to build up the correct subcommand script name
  if [[ ! -z ${SUCOMMAND[$COMMAND]} ]]; then
    COMMAND=${THIS_COMMAND}-${COMMAND}
  fi

  # Call the relevant operation
  shift
  $COMMAND $@
  exit 0
}


# ------------------------------------------------------------------------------
# Standard Functions
# ------------------------------------------------------------------------------

all() {
  # Execute the command for all subcommands
  for COMMAND in SUBCOMMAND_LIST; do
    ${THIS_COMMAND}-${COMMAND}[0] $@
  done
}

help() {
  printf "%s\n" "$0 <command> <args>"
  printf "%s\n" "$0 <sub-command> <command> <args>: Passes control to the subcommand."
  printf "\n"
  printf "%s\n" $DESCRIPTION
  printf "\n"
  printf "Commands:\n"

  for COM in ${!COMMAND_LIST[@]}; do
    printf "\t%s\t\t%s\n" "$COM" "${COMMAND_LIST[$COM]}"
  done

  printf "\n"

  printf "Sub-commands:\n"
  for COM in ${!SUBCOMMAND_LIST[@]}; do
    printf "\t%s\t\t%s\n" "$COM" "${COMMAND_LIST[$COM]}"
  done
}


# ------------------------------------------------------------------------------
# Internal Utility Functions
# ------------------------------------------------------------------------------

verify_implementation() {

  # Enforce that all commands exist
  for COM in ${!COMMAND_LIST[@]}; do
    if [[ ! $(type -t $COM) == "function" ]]; then
      echo "ERROR: Command \`$COM\` does not exist. Ensure this script provides a function with this name."
      exit 1
    fi
  done

  # Enforce that all sub-commands exist
  for COM in ${!SUBCOMMAND_LIST[@]}; do
    if [[ ! $(type -t $COM) == "function" ]]; then
      echo "Sub-command $COM does not exist - ensure a script with this name is defined."
      exit 1
    fi
  done

}
